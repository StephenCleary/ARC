Simple dynamic language with prototypal inheritance.
- "base" is just a convention, not a keyword.
TODO: Determine host context, required "standard library" objects, etc.
- Is there some way of isolating extensions?
  - A "using" scope pushing onto a stack of built-in objects? Or *all* objects in scope???
- Operators:
  - defined(expr) - returns true if expression is defined.
  - typeof(expr) - do we need this?
- Functions: lexically-scoped closures.
- Strongly order all object values?
  null < function (unspecified but reliable in a single run) < number (numeric ordering) < string (UTF16 code point ordering) < object (can define own ordering; default is reference equality: unspecified but reliable in a single run)
- null propagating operator on by default for member access?
- _ is a special variable name that can only be declared, never used.
- Proper string literals a la Raymond Chen.
- Override object comparison with a spaceship operator? Or equivalent function call.
- Should all object keys be strings? Or strings and numbers?
- "Constructor" is just a function that returns an object.
  var Animal = (name) -> { return { Name: name }; };
  var Horse = (name, mane) -> { return { base: Animal(name), Mane: mane }; };
  - This isn't prototypal inheritance; is that OK?
- Can we make functions just _callable objects_? Convention: invocations invoke the "call" member?
  - Should a function have access to its own properties?
- How best to support static methods/properties?
- Enumeration, generators, observables, and promises.

Rules actually in the language: ;)
- Implicit conversions never throw and always use the invariant culture.
  - Numeric operators (unary +,unary -,unary ++,unary --,+,-,*,/,%,+=,-=,*=,/=,%=) implicitly convert to Number.
  - Bitwise operators (unary ~,@&,@|,@^) implicitly convert to Number and then round to an unsigned 64-bit integer value.
  - Logical operators (unary !,&&,||) implicitly convert to Bool.
  - String operators (&) implicitly convert to String.
  - Comparison operator (==,!=,>,<,<=,>=) do not convert.
- No support for postincrement/postdecrement.
- Bitwise operations internally round to a 64-bit unsigned number (or 0 if the source value is out of range).
- Types:
  - Null. Only one value.
  - Bool. Only two values.
  - Function. Immutable.
  - Number. An immutable, signed decimal floating-point value with at least 16 digits of precision and a scientific notation exponent range of at least [-15,15].
  - String. UTF16, immutable.
  - Object. Associative array.

Stdlib:
- Culture-based formatting/parsing.
- Hex, currency, and other special formatting/parsing.
- Signed/unsigned shift functions.
- Math: integer division, pi, etc.
- Array and Regex.
