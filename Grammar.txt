EBNF with extensions:
- Space implies concatenation.
- "expr*" means zero or more; equivalent to "{expr}"
- "expr+" means one or more; equivalent to "expr,{expr}"
- No ; terminator.

ws = " " | "\r\n"
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
sign = "+" | "-"

literal-number = digit+ ["." digit+] [("e" | "E") [sign] digit+]
literal-null = "null"
literal-bool = "true" | "false"
literal-doublequote-string = '"' [stringchar | '""']+ '"'
literal-singlequote-string = "'" [stringchar | "''"]+ "'"
literal-string = literal-doublequote-string | literal-singlequote-string (* TODO: literal-escaped-string *)
literal-object = "{" ws* [object-member ws* ("," ws* object-member ws*)* [","]] ws* "}"
literal-array = "[" ws* [array-member ws* ("," ws* array-member ws*)* [","]] ws* "]"
literal = literal-number | literal-null | literal-bool | literal-string | literal-object | literal-array
primary-expression = literal | "(" ws* expression ws* ")" (*TODO: | identifier *)
postfix-expression = postfix-expression "[" ws* expression ws* "]"
                     postfix-expression "(" ws* [argument ws* ("," ws* argument ws*)* [","]] ws* ")"
                     postfix-expression "." identifier
unary-expression = postfix-expression | "++" unary-expression | "--" unary-expression | unary-operator multiplicative-expression
unary-operator = "+" | "-" | "~" | "!"
multiplicative-expression = unary-expression | multiplicative-expression multiplicative-operator unary-expression
multiplicative-operator = "*" | "/" | "%"
additive-expression = multiplicative-expression | additive-expression additive-operator multiplicative-expression
additive-operator = "+" | "-"

primary-expression = literal | identifier
postfix-expression = primary-expression
unary-expression = postfix-expression | (unary-operator postfix-expression)*
multiplicative-expression = unary-expression (multiplicative-operator unary-expression)*
additive-expression = multiplicative-expression (additive-operator multiplicative-expression)*

// TODO: string escape characters? Create them using number->char, also eol as constant.
//  JavaScript => String.fromCharCode(n); "string".charCodeAt(i);
// Can also have an EscapeLiteralString like var test = \\"\n";

Operators: ( ) { } [ ] . ; || ~ :
+ ++ +=
- -- -=
! !=
* *=
/ /=
% %=
@& @| @^
& &&
= ==
> >=
< <=
? ??
^^

TODO: ?? operator, ?. operator
TODO: // comments

Permitting single-line multi-statement lambdas:
  () -> { object expression }
  () => { function body }
or:
  () -> { object expression }
  () -> < function body >
or:
  () -> {{ object expression }}
  () -> { function body }
or:
  () -> { object expression }
  () -> {{ function body }}
or:
  () -> { object expression }
  () -> :{ function body }
or:
  () -> { object expression }
  () -> ( multiple statements )

if <expr> then <expr> [ else <expr> ]
if:
  <block>
then:
  <block>
else:
  <block>
Can we make any <expr> into a <block> via ":"?
- Makes object-expressions a bit less intuitive - have to use '=' instead of ':' or something.
- Additional rule that a <block> may optionally have delimiting braces? I don't really like optional braces for expression blocks, but it would be nice to have a multi-statement lambda.
Better approach: blocks are always whitespace-defined, but multiple statements can be wrapped in parenthesis.
